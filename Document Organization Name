<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document Organization Game</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            margin: 0;
            padding: 40px;
            background-color: #F4F4F4;
        }

        .game-container {
            max-width: 1200px;
            margin: 0 auto;
        }

        .header {
            text-align: center;
            margin-bottom: 48px;
        }

        .header h1 {
            color: #8C1515;
            font-size: 48px;
            margin: 0 0 16px 0;
        }

        .header p {
            font-size: 20px;
            color: #4D4F53;
            margin: 0;
        }

        .stats-panel {
            display: flex;
            flex-direction: row;
            justify-content: space-between;
            gap: 24px;
            margin-bottom: 48px;
            background: white;
            padding: 24px;
            border-radius: 12px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .stat-card {
            flex: 1;
            text-align: center;
            padding: 12px;
        }

        .stat-card + .stat-card {
            border-left: 1px solid #E5E7EB;
        }

        .stat-value {
            font-size: 32px;
            font-weight: bold;
            color: #8C1515;
            margin-bottom: 8px;
        }

        .stat-label {
            color: #4D4F53;
            font-size: 18px;
        }

        .category-grid {
            display: flex;
            flex-direction: row;
            gap: 24px;
            margin-bottom: 48px;
            flex-wrap: wrap;
        }

        .category-box {
            flex: 1;
            background: white;
            border: 2px dashed #E5E7EB;
            border-radius: 12px;
            padding: 24px;
            text-align: center;
            min-height: 200px;
            min-width: 200px;
        }

        .category-box.drag-over {
            border-color: #8C1515;
            background: #FFF5F5;
        }

        .category-icon {
            font-size: 48px;
            margin-bottom: 16px;
        }

        .category-title {
            color: #8C1515;
            font-size: 20px;
            font-weight: bold;
            margin-bottom: 8px;
        }

        .category-description {
            color: #4D4F53;
            font-size: 14px;
        }

        .document-stack {
            background: white;
            border-radius: 12px;
            padding: 32px;
            margin-bottom: 24px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.05);
        }

        .document-stack h2 {
            margin-top: 0;
            color: #4D4F53;
        }

        .documents-grid {
            display: flex;
            flex-wrap: wrap;
            gap: 16px;
        }

        .document {
            background: #F4F4F4;
            padding: 16px;
            border-radius: 8px;
            cursor: move;
            transition: all 0.2s ease;
            border: 1px solid #E5E7EB;
            min-width: 150px;
            text-align: center;
        }

        .document:hover {
            transform: translateY(-2px);
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }

        .document.dragging {
            opacity: 0.5;
        }

        .start-button {
            display: block;
            margin: 32px auto;
            padding: 16px 32px;
            font-size: 18px;
            background: #8C1515;
            color: white;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background 0.2s ease;
        }

        .start-button:hover {
            background: #660000;
        }

        @media (max-width: 768px) {
            body {
                padding: 20px;
            }
            
            /* Remove flex-direction: column to keep stats in a row */
            .stats-panel {
                flex-wrap: wrap;
            }
            
            .stat-card + .stat-card {
                border-left: none;
                border-top: 1px solid #E5E7EB;
            }
        }
    </style>
</head>
<body>
    <div class="game-container">
        <div class="header">
            <h1>Document Organization Game</h1>
            <p>Organize documents efficiently into their proper categories</p>
        </div>

        <div class="stats-panel">
            <div class="stat-card">
                <div class="stat-value">2:00</div>
                <div class="stat-label">Time Left</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">0</div>
                <div class="stat-label">Score</div>
            </div>
            <div class="stat-card">
                <div class="stat-value">0%</div>
                <div class="stat-label">Accuracy</div>
            </div>
        </div>

        <div class="document-stack">
            <h2>üìÑ Document Stack</h2>
            <div class="documents-grid" id="documentStack">
                <!-- Documents will be generated here by JavaScript -->
            </div>
        </div>

        <div class="category-grid">
            <div class="category-box" data-category="income">
                <div class="category-icon">üí∞</div>
                <div class="category-title">Income & Tax</div>
                <div class="category-description">W2s, Pay Stubs, Tax Returns</div>
            </div>
            <div class="category-box" data-category="expenses">
                <div class="category-icon">üí≥</div>
                <div class="category-title">Expenses</div>
                <div class="category-description">Bills & Receipts</div>
            </div>
            <div class="category-box" data-category="investments">
                <div class="category-icon">üìà</div>
                <div class="category-title">Investments</div>
                <div class="category-description">Stocks & Portfolio</div>
            </div>
            <div class="category-box" data-category="insurance">
                <div class="category-icon">üõ°Ô∏è</div>
                <div class="category-title">Insurance</div>
                <div class="category-description">Health & Property</div>
            </div>
        </div>

        <button class="start-button" id="startGame">Start Game</button>
    </div>

    <script>
        const documents = [
            { id: 1, name: 'W-2 Form 2023', category: 'income' },
            { id: 2, name: 'Internet Bill', category: 'expenses' },
            { id: 3, name: 'Stock Portfolio', category: 'investments' },
            { id: 4, name: 'Health Insurance', category: 'insurance' },
            { id: 5, name: '1099-INT Form', category: 'income' },
            { id: 6, name: 'Electric Bill', category: 'expenses' },
            { id: 7, name: '401k Statement', category: 'investments' },
            { id: 8, name: 'Car Insurance', category: 'insurance' }
        ];

        let score = 0;
        let timeLeft = 120;
        let gameInterval;
        let correctPlacements = 0;
        let totalPlacements = 0;

        function startGame() {
            const documentStack = document.getElementById('documentStack');
            documentStack.innerHTML = '';
            
            [...documents]
                .sort(() => Math.random() - 0.5)
                .forEach(doc => {
                    const docElement = document.createElement('div');
                    docElement.className = 'document';
                    docElement.draggable = true;
                    docElement.textContent = doc.name;
                    docElement.dataset.category = doc.category;
                    docElement.id = 'doc-' + doc.id;
                    
                    docElement.addEventListener('dragstart', handleDragStart);
                    docElement.addEventListener('dragend', handleDragEnd);
                    
                    documentStack.appendChild(docElement);
                });

            score = 0;
            timeLeft = 120;
            correctPlacements = 0;
            totalPlacements = 0;
            updateStats();
            
            clearInterval(gameInterval);
            gameInterval = setInterval(updateTimer, 1000);
        }

        function handleDragStart(e) {
            e.dataTransfer.setData('text/plain', e.target.id);
            e.target.classList.add('dragging');
        }

        function handleDragEnd(e) {
            e.target.classList.remove('dragging');
        }

        document.querySelectorAll('.category-box').forEach(box => {
            box.addEventListener('dragover', e => {
                e.preventDefault();
                box.classList.add('drag-over');
            });

            box.addEventListener('dragleave', () => {
                box.classList.remove('drag-over');
            });

            box.addEventListener('drop', e => {
                e.preventDefault();
                box.classList.remove('drag-over');
                
                const id = e.dataTransfer.getData('text/plain');
                const doc = document.getElementById(id);
                if (!doc) return;

                const isCorrect = doc.dataset.category === box.dataset.category;
                totalPlacements++;
                if (isCorrect) {
                    correctPlacements++;
                    score += 10;
                }
                
                box.appendChild(doc);
                updateStats();
            });
        });

        function updateTimer() {
            timeLeft--;
            const minutes = Math.floor(timeLeft / 60);
            const seconds = timeLeft % 60;
            document.querySelectorAll('.stat-value')[0].textContent = 
                `${minutes}:${seconds.toString().padStart(2, '0')}`;

            if (timeLeft <= 0) {
                clearInterval(gameInterval);
                endGame();
            }
        }

        function updateStats() {
            const accuracy = totalPlacements > 0 
                ? Math.round((correctPlacements / totalPlacements) * 100) 
                : 0;
            
            document.querySelectorAll('.stat-value')[1].textContent = score;
            document.querySelectorAll('.stat-value')[2].textContent = `${accuracy}%`;
        }

        function endGame() {
            clearInterval(gameInterval);
            const accuracy = Math.round((correctPlacements / totalPlacements) * 100) || 0;
            const timeBonus = timeLeft > 0 ? Math.round(timeLeft / 2) : 0;
            score += timeBonus;
            updateStats();
            
            alert(`Game Over!\nFinal Score: ${score}\nAccuracy: ${accuracy}%`);
        }

        document.getElementById('startGame').addEventListener('click', startGame);
    </script>
</body>
</html>
